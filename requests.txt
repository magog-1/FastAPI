• Для миграций базы данных с помощью Alembic настройте файл alembic.ini и env.py, указывая путь к models через app/db/base.py.  
• Запуск приложения: uvicorn main:app  
• Запуск воркера Celery: celery -A celery_app.celery_app worker --loglevel=info  (celery -A celery_app.celery_app worker --pool=solo --loglevel=info)
• Не забудьте установить и запустить Redis для работы Celery.


1. Примеры тестовых запросов к API

1.1. Регистрация нового пользователя (POST /auth/sign-up/)

Команда cURL:
-
curl -X POST http://localhost:8000/auth/sign-up/ \
  -H "Content-Type: application/json" \
  -d '{
        "email": "user@example.com",
        "password": "securepassword123"
      }'
-

Ожидаемый ответ:
{
  "id": 1,
  "email": "user@example.com",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

─────────────────────────────  
1.2. Вход в систему (POST /auth/login/)

Команда cURL:
-
curl -X POST http://localhost:8000/auth/login/ \
  -H "Content-Type: application/json" \
  -d '{
        "email": "user@example.com",
        "password": "securepassword123"
      }'
-

Ожидаемый ответ:
{
  "id": 1,
  "email": "user@example.com",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

─────────────────────────────  
1.3. Получение данных текущего пользователя (GET /auth/users/me/)

Предположим, у вас уже есть выданный JWT-токен (например, TOKEN_VALUE). Тогда отправляем запрос со следующим заголовком:

Команда cURL:
-
curl -X GET http://localhost:8000/auth/users/me/ \
  -H "Authorization: Bearer TOKEN_VALUE"
-

Ожидаемый ответ:
{
  "id": 1,
  "email": "user@example.com"
}

─────────────────────────────  
1.4. Запуск задачи парсинга сайта (POST /parse/parse_website)

Команда cURL:
-
curl -X POST http://localhost:8000/parse/parse_website \
  -H "Content-Type: application/json" \
  -d '{
        "url": "https://example.com",
        "max_depth": 3,
        "format": "graphml"
      }'
-

Ожидаемый ответ:
{
  "task_id": "уникальный_идентификатор_задачи"
}

─────────────────────────────  
1.5. Получение статуса парсинга (GET /parse/parse_status?task_id=...)

Команда cURL:
-
curl -X GET "http://localhost:8000/parse/parse_status?task_id=уникальный_идентификатор_задачи"
-

Ожидаемый ответ (если задача завершена):
{
  "status": "SUCCESS",
  "progress": 100,
  "result": "xml-графа"
}

Если задача еще в работе, статус будет отличаться (например, PENDING или STARTED), а progress – меньше 100.